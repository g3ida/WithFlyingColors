[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform float u_aspect_ratio = 1.;
uniform float u_timer = -10.0;
uniform vec2 u_contact_pos = vec2(0.5, 0.5);
uniform float propagation_speed = 1.0;
uniform float darkness = 0.78;

float circleshape(vec2 position, vec2 contact_pos, float radius){
  return step(radius, length(position - contact_pos));
}

mat3 makeRotation( float angleInRadians ){
    float c = cos(angleInRadians);
    float s = sin(angleInRadians);
    mat3 m = mat3(vec3(c, -s, 0), vec3(s, c, 0), vec3(0, 0, 1));
    return m;
}

mat3 makeScale(vec2 s) {
   mat3 m = mat3(vec3(s.x, 0, 0), vec3(0, s.y, 0), vec3(0, 0, 1));
    return m;
}

void fragment() {
	vec2 position = UV;
	
	mat3 scale = makeScale(vec2(1, u_aspect_ratio));

// SCREEN_UV for whole screen
	vec2 translated = SCREEN_UV - vec2(0., 0.5);
	vec3 res = vec3(translated, 0) * scale;
	vec2 undo_translation = res.xy + vec2(0., 0.5);
	
	vec2 translated_contact_pos = u_contact_pos - vec2(0., 0.5);
	vec3 res2 = vec3(translated_contact_pos, 0) * scale;
	vec2 undo_translated_contact_pos = res2.xy + vec2(0., 0.5);
		
	float circle = circleshape(undo_translation.xy, undo_translated_contact_pos, propagation_speed * (u_timer));

	float color_darkness = 1.0;
	if (circle < 0.5) {
		color_darkness = min(1.0, darkness + 0.06*(u_timer));
	}
	vec3 circle_color  = COLOR.rgb * color_darkness;
	vec4 col = texture(TEXTURE, UV);
	COLOR = vec4(col.rgb*circle_color, col.a);
}"
